version: 2.1

# Define orbs for easier configuration
orbs:
  go: circleci/go@1.11.0
  docker: circleci/docker@2.4.0

# Define reusable commands
commands:
  setup_go_environment:
    description: "Set up Go environment and dependencies"
    steps:
      - checkout
      - go/install:
          version: "1.21.5"
      - go/load-cache
      - run:
          name: Download dependencies
          command: make install
      - go/save-cache

  setup_aws_and_docker:
    description: "Setup AWS CLI and Docker for ECR operations"
    steps:
      - run:
          name: Install AWS CLI
          command: |
            if ! command -v aws &> /dev/null; then
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
            fi
      - run:
          name: Login to AWS ECR
          command: |
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
      - run:
          name: Create ECR repository if it doesn't exist
          command: |
            aws ecr describe-repositories --region ${AWS_DEFAULT_REGION} --repository-names ${AWS_ECR_REPOSITORY_NAME} || aws ecr create-repository --region ${AWS_DEFAULT_REGION} --repository-name ${AWS_ECR_REPOSITORY_NAME}

# Define jobs
jobs:
  test:
    docker:
      - image: cimg/go:1.21.5
    working_directory: ~/llm-proxy
    steps:
      - setup_go_environment
      - run:
          name: Run unit tests
          command: make test
      - run:
          name: Run go vet
          command: go vet ./...
      - run:
          name: Run go fmt check
          command: |
            if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
              echo "Go code is not formatted:"
              gofmt -s -l .
              exit 1
            fi

  build-and-push:
    docker:
      - image: cimg/go:1.21.5
    working_directory: ~/llm-proxy
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - setup_aws_and_docker
      - run:
          name: Build and push Docker image
          command: |
            # Set variables
            ECR_URL_PREFIX=${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
            SHA=$(echo ${CIRCLE_SHA1} | cut -c1-7)
            BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            VERSION=dev-${SHA}
            IMAGE_URL=${ECR_URL_PREFIX}/${AWS_ECR_REPOSITORY_NAME}

            echo "Building image for SHA: ${SHA}"

            # Build Docker image
            docker build --progress=plain \
              --build-arg BUILD_DATE=${BUILD_DATE} \
              --build-arg VCS_REF=${SHA} \
              --build-arg VERSION=${VERSION} \
              -f build/Dockerfile.prod . \
              -t ${IMAGE_URL}:${SHA} \
              -t ${IMAGE_URL}:latest

            # Push images
            docker push ${IMAGE_URL}:${SHA}
            docker push ${IMAGE_URL}:latest

# Define workflows
workflows:
  version: 2
  test-and-deploy:
    jobs:
      - test:
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/

      - build-and-push:
          requires:
            - test
          filters:
            branches:
              only:
                - main
                - develop
            tags:
              ignore: /.*/
          context:
            - AWS
